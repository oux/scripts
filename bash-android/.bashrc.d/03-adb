

# export ANDROID_ADB_SERVER_PORT=5038

dumplogs () {
    DIR=~/bz/perso/$(date +"%Y%m%d")
    mkdir -p $DIR
    cd $DIR
    adb pull /data/log log
    adb pull /data/anr anr
    adb pull /data/tombstones tombstones
    adb shell dmesg > dmesg
}


alias r="unset ANDROID_SERIAL; unset ANDROID_SERIAL_ALIAS"

alias i=iadb
iadb() {
    DO_FORCE_SERIAL=false
    if [ ${#@} -eq 0 ]
    then
        DO_FORCE_SERIAL=true
        unset ANDROID_SERIAL
        unset ANDROID_SERIAL_ALIAS
    fi
    if [ "$1" == "-f" ]
    then
        DO_FORCE_SERIAL=true
        shift
    fi
    local ARGS="wait-for-device"
    LIST=( $(adb devices |sed -n "s/\r//g;s/\([^[:space:]]*\)[[:space:]]*device$/\1/p") )
    [ -z "$LIST" -a "$#" -eq 0 ] && echo "No device detected" && return
    if [ "$ANDROID_SERIAL" ]
    then
        [ "$ANDROID_SERIAL_ALIAS" ] && DEVICE="$ANDROID_SERIAL($ANDROID_SERIAL_ALIAS)" || DEVICE=$ANDROID_SERIAL
        echo "Action on $DEVICE" >&2
    elif [ ${#LIST[*]} -gt 1 ]
    then
        unset LIST_
        for i in ${LIST[*]}
        do
            if $DO_FORCE_SERIAL
            then
                ALIAS=$(grep $i ~/.android/device_aliases) && LIST_+=($ALIAS) || LIST_+=("$i")
            else
                ALIAS=$(grep $i ~/.android/device_aliases) && LIST_+=($ALIAS tmp_$ALIAS) || LIST_+=("$i" tmp_$i)
            fi
        done
        select ID in ${LIST_[*]}
        do
            ID=${ID%:*}
            if [ "$ID" != "${ID#tmp_}" ]
            then
                ID=${ID#tmp_}
                ARGS=" -s $ID "$ARGS
            else
                export ANDROID_SERIAL=$ID
            fi
            break
        done
    elif [ ${#LIST[*]} -gt 0 ] && $DO_FORCE_SERIAL
    then
        export ANDROID_SERIAL=$LIST
    fi
    is_function getdevalias && ANDROID_SERIAL_ALIAS=$(getdevalias)
    adb $ARGS "${@}"
}

## Todo completion with aliases
_adb_with_aliases() {
    echo "To be implemented"
}

is_function _adb && complete -o default -F _adb iadb

function disable_intel_apps() {
    for p in $(adb shell pm list packages |grep intel |sed "s/package://;s/\r//") ; do echo $p; adb shell pm disable $p; done
}

function das() {
LIST=( $(adb devices |sed -n "s/\r//g;s/\([^[:space:]]*\)[[:space:]]*device$/\1/p") )
for ID in ${LIST[*]}
do
    ALIAS=$(getdevalias $ID)
    [ "$ALIAS" ] && DEVICE="$ID($ALIAS)" || DEVICE=$ID
    echo "Action on $DEVICE" >&2
    adb -s $ID wait-for-device shell "${@}"
done
}

function vdas() {
DO_DIFF=false
case $1 in
    -d|diff|--diff)
        DO_DIFF=true
        shift
        ;;
esac

LIST=( $(adb devices |sed -n "s/\r//g;s/\([^[:space:]]*\)[[:space:]]*device$/\1/p") )
local COMMAND=
for ID in ${LIST[*]}
do
    ALIAS=$(getdevalias $ID)
    [ "$ALIAS" ] && DEVICE="$ID - $ALIAS " || DEVICE=$ID
    echo "Action on $DEVICE" >&2
    COMMAND="$COMMAND <(echo Action on $DEVICE: && adb -s $ID wait-for-device shell \"""${@}""\")"
done
if $DO_DIFF
then
    eval vimdiff $COMMAND
else
    eval vi -O $COMMAND
fi
}

alias aroot="iadb root && iadb shell"
alias a="iadb logcat -v threadtime -b system -b main -b radio -b events -b kernel > logcat"
alias as="iadb shell"
alias asl="iadb shell ls -l"
alias dasl="das ls -l"
alias dasc="das cat"
alias adm="iadb shell dumpsys meminfo"
alias adsf="iadb shell dumpsys SurfaceFlinger"
alias ash="iadb push"
alias all="iadb pull"
alias acpucur="iadb shell cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq"

function al() {
KERNEL="-b kernel"
adb logcat -d -b kernel |grep -q "open log device" && KERNEL=
adb logcat -v threadtime -b system -b main -b radio -b events $KERNEL "${@}"
}

function acpumin() {
if [ "$1" ]
then
    for i in $(adb shell ls -d /sys/devices/system/cpu/cpu[0-9] |sed "s/\r//")
    do
        adb shell "echo $1 > $i/cpufreq/scaling_min_freq"
    done
fi
adb shell cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq
}

function apid() {
adb shell ps |grep $1
}

function acpumax() {
if [ "$1" ]
then
    for i in $(adb shell ls -d /sys/devices/system/cpu/cpu[0-9] |sed "s/\r//")
    do
        adb shell "echo $1 > $i/cpufreq/scaling_max_freq"
    done
fi
adb shell cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq
}

function dump_traces()
{
    echo removing current traces
    adb shell rm /data/anr/traces.txt
    echo generating new traces
    adb shell killall -3 system_server
    sleep 0.2
    echo getting new traces
    adb pull /data/anr/traces.txt
    echo traces pulled
}

function lmk_dump()
{
    adb shell chmod 755 /sys/module/lowmemorykiller/parameters/minfree /sys/module/lowmemorykiller/parameters/adj
    adb shell "
    echo /sys/module/lowmemorykiller/parameters/minfree
    cat  /sys/module/lowmemorykiller/parameters/minfree
    echo /sys/module/lowmemorykiller/parameters/adj
    cat  /sys/module/lowmemorykiller/parameters/adj"

}

function lmk_force()
{
    adb shell chmod 755 /sys/module/lowmemorykiller/parameters/minfree /sys/module/lowmemorykiller/parameters/adj
    if [ "$1" ]
    then
        adb shell 'echo "6968,8711,10453,12195,21267,30720" > /sys/module/lowmemorykiller/parameters/minfree'
    else
        adb shell 'echo "18432,23040,27648,32256,36864,46080" > /sys/module/lowmemorykiller/parameters/minfree'
    fi
    lmk_dump
}

function lmk_disable()
{
    adb shell 'echo "0,0,0,0,0,0" > /sys/module/lowmemorykiller/parameters/minfree'
    lmk_dump
}

function dump_kgsl()
{
    adb shell "
    echo /sys/class/kgsl/kgsl/proc/$1/ion
    cat  /sys/class/kgsl/kgsl/proc/$1/ion
    echo /sys/class/kgsl/kgsl/proc/$1/kernel
    cat  /sys/class/kgsl/kgsl/proc/$1/kernel
    echo /d/kgsl/proc/$1/mem
    cat  /d/kgsl/proc/$1/mem"
}

function adm() {
adb shell dumpsys meminfo
}

function adma() {
adb shell dumpsys meminfo -a > dumpsys_meminfo
for APP in $(awk '/kB: Native/{DO_GRAB=1} /kB: System/{DO_GRAB=0} DO_GRAB==1 && /kB: [^ ]* \(pid [^ ]*\)/{print $3}' dumpsys_meminfo)
do
    APP=${APP//\//}
    adb shell dumpsys meminfo -a $APP > dumpsys_meminfo.$APP
done

}

function acmdline_osip() {
adb shell 'cat /d/osip/cmdline'
}

function unlimit_mem_osip(){
adb shell '
sed "s/ mem=[0-9]\+M//" /d/osip/cmdline > /d/osip/cmdline
'
acmdline_osip
}

function limit_mem_osip(){
MEM=${1:-484}
adb shell '
sed "s/$/ mem='${MEM}'M/" /d/osip/cmdline > /d/osip/cmdline
'
acmdline_osip
}

function acmdline() {
if [ $# -eq 1 ]
then
    adb shell "kcmdline -s '$@' /dev/block/by-name/boot"
fi
adb shell 'kcmdline -g /dev/block/by-name/boot'
}

function unlimit_mem(){
local IMG=/dev/block/by-name/boot
adb shell '
kcmdline -s "$(kcmdline -g '$IMG' |sed "s/ mem=[^ ]\+//")" '$IMG
acmdline
}

function limit_mem(){
local IMG=/dev/block/by-name/boot
local MEM=${1:-1006}
adb shell '
kcmdline -s "$(kcmdline -g '$IMG' |sed "s/$/ mem='${MEM}'M/")" '$IMG
acmdline
}

function kmsg_buffer_size(){
MEM=$1
if [ "$MEM" ]
then
    adb shell '
    echo $(cat /d/osip/cmdline)" log_buf_len='$MEM'M" > /d/osip/cmdline
'
    # sed "s/$/ log_buf_len='$MEM'M//" /d/osip/cmdline > /d/osip/cmdline
else
    adb shell '
    sed "s/ mem=[0-9]\+M//" /d/osip/cmdline > /d/osip/cmdline
'
fi
acmdline
}


alias drop_gem_caches='adb shell "echo 0xff > /d/dri/0/i915_gem_drop_caches"'
alias drop_gem_caches_continue='adb shell "while : ; do echo 0xff > /d/dri/0/i915_gem_drop_caches; sleep 1; done"'
alias dump_gen_gfx="adb shell cat /sys/class/drm/card0/gfx_memtrack/i915_gem_meminfo"
alias debug_hwc="adb shell service call hwc.info 99"

alias webgl="adb shell am start -a android.intent.action.VIEW -t text/html -n com.android.chrome/com.google.android.apps.chrome.Main -d https://www.khronos.org/registry/webgl/conformance-suites/1.0.2/webgl-conformance-tests.html?skip=multisample-corruption.html,uniform-default-values.html"
alias mobile01="adb shell am start -a android.intent.action.VIEW -t text/html -n com.android.chrome/com.google.android.apps.chrome.Main -d www.mobile01.com/newsarchive.php"
alias chromeurl="adb shell am start -a android.intent.action.VIEW -t text/html -n com.android.chrome/com.google.android.apps.chrome.Main -d chrome://urls"
alias chromememinternal="adb shell am start -a android.intent.action.VIEW -t text/html -n com.android.chrome/com.google.android.apps.chrome.Main -d chrome://memory-internals"
alias mobile01_girl="adb shell am start -a android.intent.action.VIEW -t text/html -n com.android.chrome/com.google.android.apps.chrome.Main -d http://www.mobile01.com/newsdetail.php?id=17407"


function freq() {
if [ "$1" ]
then
    adb shell "echo $1 | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq"
else
    echo "Current freqs:"
    adb shell "cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq"
    echo "Available freqs:"
    adb shell "cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_available_frequencies"
fi
}

function grab_free() {
BOARD=$(adb shell getprop ro.product.board)
case $BOARD in
    cht*)
    adb shell  "while : ; do cat /proc/meminfo /sys/class/drm/card0/gfx_memtrack/i915_gem_meminfo; sleep 1; done" |awk '/MemFree|^Cached/{v=v" "$2}/GFX/{sub("K\r.*","",$NF); print systime()" "v" "$NF; v=""; fflush()}' |tee evol.log
    ;;
    *)
    adb shell  "while : ; do cat /proc/meminfo; sleep 1; done" |awk '/MemFree/{free=$2}/^Cached/{print systime()" "free" "$2; fflush()}' |tee evol.log
    ;;
esac
}

alias alog="adb shell log -t SAD"

function m() {
MTBF=$1
shift
ssh mtbf$MTBF "adb shell ${@}"
}

function ainst() {
local save=false
local restore=false
local restart=true
local suffix=.ori
case $1 in
    -n|n)
        restart=false
        shift
        ;;
    -r|r)
        restore=true
        shift
        suffix=$1
        shift
        ;;
    -b|b|-s|s)
        save=true
        shift
        suffix=$1
        shift
        ;;
esac
local -r file=$1
local dest=/system${file##*/system}
local bkp=${dest}$suffix

$save && adb shell cp -a $dest $bkp
if $restore
then
    adb shell "cp $bkp $dest"
else
    adb push $file $dest
fi
adb shell "ls -l $dest && md5sum $dest"
adb shell "ls -l $bkp && md5sum $bkp"
$restart && adb shell "stop && start"
true
}

# vim:ft=sh
