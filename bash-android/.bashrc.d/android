function build() {
local BUILD_LOW_MEM=
local MAKE_TARGET=
local BUILDDATE=
local BUILDINFO=
local BUILDINFO_SHORT=

BUILDDATE=$(date +"%Y%m%d-%H%M")

MAKE_TARGET="flashfiles blank_flashfiles"
while [ "$1" ]
do
    case $1 in
        c|com|comment)
            shift
            COMMENT=$1
            ;;
        low_mem|low_ram|512MB|512)
            BUILD_LOW_MEM="BOARD_HAVE_SMALL_RAM=true"
            ;;
        mid_mem|mid_ram|1GB|1G)
            BUILD_LOW_MEM="BOARD_HAVE_MID_RAM=true LIMIT_TO_1GB_RAM=true"
            ;;
        system|systemimage)
            MAKE_TARGET=systemimage
            ;;
        boot|bootimage)
            MAKE_TARGET=bootimage
            ;;
        flashfiles|blank_flashfiles)
            MAKE_TARGET=$1
            ;;
    esac
    shift
done

BUILDINFO=$(basename $PWD)-$TARGET_PRODUCT-$TARGET_BUILD_VARIANT-${MAKE_TARGET// /_}_$BUILDDATE
BUILDINFO_SHORT=$(basename $PWD)-$BUILDDATE
local LOG=$HOME/log/$BUILDINFO

if [ "$COMMENT" ]
then
    BUILDINFO=${BUILDINFO}_${COMMENT// /_}
    BUILDINFO_SHORT=${BUILDINFO_SHORT}_${COMMENT// /_}
fi
source build/envsetup.sh >> $LOG 2>&1
echo "Building $MAKE_TARGET" | tee -a $LOG
echo 'nohup time -p make BUILD_NUMBER="'$BUILDINFO_SHORT'" -j 24 showcommands '$BUILD_LOW_MEM' '$MAKE_TARGET >> $LOG 2>&1
nohup time -p make BUILD_NUMBER="$BUILDINFO_SHORT" -j 24 showcommands $BUILD_LOW_MEM $MAKE_TARGET >> $LOG 2>&1 &

echo "Build log on : "$LOG
}
complete -F _lunch build

function u() {
    android update project -t 1 -p $(pwd)
}

function bz() {
BZ=~/bz

[ ! -d $BZ/$1 ] && mkdir $BZ/$1 && echo "Creating a new directory"
cd $BZ/$1
}

function _bz() {
	local cur prev cmd components service_path
	service_path=$workspace

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}

    COMPREPLY=( $( compgen -W "$(ls ~/bz/|sed 's:.*bz/::')" -- $cur ) )

	return 0

}
complete -F _bz bz

#function traces() {
#[ ! -d ~/traces/$1 ] && $[ $
#cd ~/traces/$1
#}
#
#function _traces() {
#	local cur prev cmd components service_path
#	service_path=$workspace
#
#	COMPREPLY=()
#	cur=${COMP_WORDS[COMP_CWORD]}
#	prev=${COMP_WORDS[COMP_CWORD-1]}
#
#    COMPREPLY=( $( compgen -W "$(ls ~/traces/|sed 's:.*traces/::')" -- $cur ) )
#
#	return 0
#
#}
#complete -F _traces traces

getEventLogTag() {

grep $1 $workspace/frameworks/base/services/java/com/android/server/EventLogTags.logtags \
$workspace/packages/apps/Nfc/src/com/android/nfc/EventLogTags.logtags \
$workspace/packages/apps/Phone/src/com/android/phone/EventLogTags.logtags \
$workspace/packages/apps/QuickSearchBox/src/com/android/quicksearchbox/EventLogTags.logtags \
$workspace/packages/apps/Browser/src/com/android/browser/EventLogTags.logtags \
$workspace/packages/providers/CalendarProvider/src/com/android/providers/calendar/EventLogTags.logtags \
$workspace/packages/providers/ContactsProvider/src/com/android/providers/contacts/EventLogTags.logtags \
$workspace/frameworks/base/services/java/com/android/server/EventLogTags.logtags \
$workspace/frameworks/base/services/java/com/android/server/am/EventLogTags.logtags \
$workspace/frameworks/base/core/java/android/speech/tts/EventLogTags.logtags \
$workspace/frameworks/base/core/java/android/content/EventLogTags.logtags \
$workspace/frameworks/base/core/java/android/webkit/EventLogTags.logtags \
$workspace/frameworks/opt/telephony/src/java/com/android/internal/telephony/EventLogTags.logtags \
$workspace/system/core/libsysutils/EventLogTags.logtags

}

function p () {
> output
for component in "${@}"
do
    echo "#########################################"
    echo "### $component"
    echo "#########################################"
    mmm $component |tee -a output || return 1
done
install_on_device.sh && adb reboot
}

alias f="ssh byt phoneflashtool"

function apk_version() {
/home/seb/android-sdk/build-tools/21.1.2/aapt d badging $1 | head -n1
}

alias editmem="vim -O frameworks/base/{services/core/java/com/android/server/am/ActivityManagerService.java,core/{java/com/android/internal/util/MemInfoReader.java,jni/android_os_Debug.cpp}}"
# vim:ft=sh
