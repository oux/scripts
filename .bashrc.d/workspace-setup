# workspace completion
# Source this file
# modified Sebastien MICHEL <sebastien.michel@intel.com>
#
# test -s ~/.work-setup && . ~/.work-setup || true

[ "$BASH_SOURCE" = "$0" ] && echo "You must :
 * Edit this file to give the \$workspace (currently:$workspace)
 * source this file: '. $0'
" && exit

DEFAULT=imin-legacy

REPOLIST_FILE_EXT=.repo_list
CSCOPE_FILE_EXT=.files
CSCOPE_EXT=.cscope
export workspaces=$HOME/android
export workspace=
export current=
export repo_list_file=
export CSCOPE_FILE=
export CSCOPE_DB=

function cs_update() {
    (
    if [ ! -f $CSCOPE_FILE ]
    then
        time find $workspace -type f |grep "\.\(java\|cpp\|h\|c\)$" |grep -v "wnull-character\|with space\|test\|cts\|kernel-next\|external\|WinLauncher\|master_to_slave_hrt" |sed 's/^/"/;s/$/"/'> $CSCOPE_FILE
    fi
    echo "generating $CSCOPE_DB..."
    cd $(dirname $CSCOPE_FILE)
    time cscope -c -b -q -k -i$CSCOPE_FILE -f$CSCOPE_DB
    )
}

function cs () {
(cd $HOME/tmp; cscope -d)
}

cs_kernel()
{
    LNX=$PWD
    export CSCOPE_FILE=$LNX/cscope$CSCOPE_FILE_EXT
    export CSCOPE_DB=$LNX/cscope.out
    [ "$1" == "-f" ] && rm -f $CSCOPE_FILE $CSCOPE_DB

    if [ ! -f $CSCOPE_FILE ]
    then
        find  $LNX                                                                \
            -path "$LNX/arch/*" ! -path "$LNX/arch/i386*" -prune -o               \
            -path "$LNX/include/asm-*" ! -path "$LNX/include/asm-i386*" -prune -o \
            -path "$LNX/tmp*" -prune -o                                           \
            -path "$LNX/Documentation*" -prune -o                                 \
            -path "$LNX/scripts*" -prune -o                                       \
            -path "$LNX/drivers*" -prune -o                                       \
            -name "*.[chxsS]" -print > $CSCOPE_FILE
    fi
    [ ! -f $CSCOPE_DB ] &&
        cscope -b -q -k
}

_work()
{
	local cur prev cmd components service_path
	service_path=$workspaces
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}

    case ${#COMP_WORDS[*]} in
        2)
            COMPREPLY=( $( compgen -W "$(find $service_path/ -maxdepth 1  -type d |sed 's,.*/,,')" -- $cur ) )
            ;;
        3)
            COMPREPLY=( $( compgen -W "eng userdebug user" -- $cur ) )
            ;;
    esac

	return 0
}

function work() {
echo $1
current=${1:-$DEFAULT}
workspace=$workspaces/$current
repo_list_file=$workspaces/$current$REPOLIST_FILE_EXT
export CSCOPE_FILE=$workspaces/$current$CSCOPE_FILE_EXT
export CSCOPE_DB=$workspaces/$current$CSCOPE_EXT
# export OUT_DIR=out.$2
cd $workspace || { echo "$workspace doesn't exists"; return; }
#source build/envsetup.sh
#echo "Installing ccache_wrapper..." &&
#/home/repomirror/utils/ccache_wrapper_install.sh
# export CCACHE_RECACHE=1
# export USE_CCACHE=1
# PATH=$workspace/vendor/intel/support:$PATH
}
complete -F _work work


mkcache()
{
    (cd $workspace;repo list|sed -n 's: .*::p' > $workspaces/$current$REPOLIST_FILE_EXT)
}

_packages()
{
	local cur prev cmd components service_path
	service_path=$workspace/packages

    if [ ! -f $repo_list_file ]
    then
        mkcache
    fi

#	echo "Service_path: $service_path"
#	echo "ARGS: $*"
#	echo "COMP_WORDS: $COMP_WORDS"
#	echo "COMP_CWORD: $COMP_CWORD"
#	echo "COMP_WORDS[1]: ${COMP_WORDS[1]}"
#	echo "bash_source: $BASH_SOURCE"

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}

	COMPREPLY=( $( compgen -W "$(sed -n "s:^packages/::p" $repo_list_file)" -- $cur ) )

	return 0
}

function pkg() {
    cd $workspace/packages/$1
}
complete -F _packages pkg

_aosp()
{
	local cur prev cmd components service_path
	service_path=$workspace

    if [ ! -f $repo_list_file ]
    then
        mkcache
    fi

#	echo "Service_path: $service_path"
#	echo "ARGS: $*"
#	echo "COMP_WORDS: $COMP_WORDS"
#	echo "COMP_CWORD: $COMP_CWORD"
#	echo "COMP_WORDS[1]: ${COMP_WORDS[1]}"
#	echo "bash_source: $BASH_SOURCE"

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}

    COMPREPLY=( $( compgen -W "$(< $repo_list_file)" -- $cur ) )
	# COMPREPLY=( $( compgen -W "$(cd $workspace;repo list|sed -n 's: .*::p')" -- $cur ) )

	return 0
}

function aosp() {
    cd $workspace/$1
}
complete -F _aosp aosp

function gitstats4aosp() {
while read BOM
do
    mkdir -p /var/www/${BOM//\//_}
    gitstats $workspace/$BOM /var/www/${BOM//\//_}
done < $repo_list_file
}

# vim:ft=sh
# EOF
